{
  "HMACModule": {
    "TheoryOfOperation": {
      "BlockDiagram": {
        "Inputs": {
          "clk": "Clock input to the HMAC module, driving the synchronous logic including state transitions and data processing.",
          "rst_n": "Active low reset signal for the HMAC module, used to initialize internal states and halt ongoing operations.",
          "key": "256-bit key input for HMAC computation, used in two stages of processing with different padding for inner and outer hash computations.",
          "message": "512-bit message input for HMAC computation, processed together with the key after appropriate padding in two separate hashing stages.",
          "start": "Start signal for initiating HMAC processing, triggers the beginning of the HMAC computation sequence."
        },
        "Outputs": {
          "hmac_out": "256-bit HMAC output resulting from the computation, representing the final cryptographic hash.",
          "busy": "Signal indicating that the HMAC computation is in progress, active high when processing and low when idle.",
          "done": "Signal indicating the completion of the HMAC computation, transitions to high once the HMAC result is ready."
        },
        "SHA256HashFunction": {
          "Description": "Executes SHA-256 hashing on the provided data block as part of the HMAC computation process, applying multiple hash rounds defined by the SHA-256 standard.",
          "Details": "The SHA-256 module processes data through 64 rounds, using bitwise operations, logical functions, and constants specified in the SHA-256 standard. It operates in two stages within the HMAC computation, processing both the inner padded hash and the outer padded hash sequentially."
        }
      },
      "Description": {
        "ProcessingFlow": "HMAC uses a two-step hashing process involving both inner and outer pads. The first step combines the inner pad with the message, and the second step hashes this result combined with the outer pad."
      }
    },
    "DesignDetails": {
      "CoreLogic": {
        "SHA256Algorithm": {
          "Description": "The SHA-256 algorithm within HMAC processes the input data block by expanding the original 512-bit block into a series of 64 words using the message schedule algorithm. It then iteratively updates an 8-variable buffer through a series of logical transformations and modular additions based on these words.",
          "MessageSchedule": "Expands the 16-word input block into a 64-word schedule using the functions sigma0 and sigma1.",
          "CompressionFunction": "Updates the hash values through modular additions and bitwise operations including Maj, Ch, Sigma0, and Sigma1."
        },
        "HMACIntegration": {
          "Description": "Integrates the SHA-256 module to perform HMAC computation by first processing the inner pad combined with the key and message, followed by processing the outer pad combined with the intermediate hash result.",
          "InnerHash": "Computes SHA-256 on the key XORed with the inner padding and the message.",
          "OuterHash": "Computes SHA-256 on the key XORed with the outer padding and the result from the Inner Hash."
        }
      },
      "StateManagement": {
        "StateMachine": {
          "Description": "Manages the HMAC computation phases: IDLE, INNER_HASH, OUTER_HASH, handling transitions based on the processing state and the readiness of the SHA-256 output.",
          "States": {
            "IDLE": "Module awaits start signal to initiate HMAC processing.",
            "INNER_HASH": "Processes the inner hash and transitions to OUTER_HASH upon completion signaled by SHA-256's readiness.",
            "OUTER_HASH": "Processes the outer hash and returns to IDLE, indicating completion with the done signal."
          }
        }
      }
    },
    "SignalDefinitions": {
      "Inputs": {
        "clk": "Primary clock input for all synchronous operations within the module.",
        "rst_n": "Reset input, active low, initializes or resets internal states and computation registers.",
        "key": "Input cryptographic key, used directly in hashing processes after appropriate padding.",
        "message": "Input message data, processed in conjunction with the cryptographic key through SHA-256.",
        "start": "Control input to initiate the HMAC computation cycle."
      },
      "Outputs": {
        "hmac_out": "Output containing the final HMAC result after two stages of SHA-256 hashing.",
        "busy": "Indicator that the HMAC module is actively processing.",
        "done": "Indicator that the HMAC computation has completed and the output is valid."
      }
    }
  }
}
